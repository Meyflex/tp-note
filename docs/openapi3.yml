openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: localhost
    url: http://localhost:3002/api
info:
  description: Cloud TP Note
  version: '1.0.0'
  title: Cloud TP Note
  contact:
    email: nocompany@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: books
    description: API pour mes bouquins

components:
  schemas:
    Task:
      type: object
      required:
        - id
        - title
        - priorite
      properties:
        id:
          type: string
          format: id
          example: dfbb88f7-3af3-4ee3-84cc-083a20aaeeec
        title:
          type: string
          example: Lord of the ring
        description:
          type: string
          example: Somebody lost his rings
        priorite:
          type: integer
          example: 1
    Tag:
      type: object
      required:
        - id
        - title
        - priorite
      properties:
        id:
          type: string
          format: id
          example: dfbb88f7-3af3-4ee3-84cc-083a20aaeeec
        title:
          type: string
          example: Lord of the ring


paths:
  /Task:
    get:
      operationId: searchAll
      description: récupère tous les tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      operationId: create
      description: créer un task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /Task/{id}:
    get:
      operationId: searchById
      description: récupère un task par son id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    patch:
      operationId: update
      description: met à jour un task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    delete:
      operationId: delete
      description: supprime un task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /Tag:
    get:
      operationId: searchAll
      description: récupère tous les tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
    post:
      operationId: create
      description: créer un tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'

        
 

